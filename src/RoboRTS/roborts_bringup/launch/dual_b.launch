<launch>

  <!-- Run the Base Node -->
  <node ns="robot_0" pkg="roborts_base" type="roborts_base_node" name="roborts_base_node" output="screen" respawn="true">
    <rosparam command="load" file="$(find roborts_base)/config/roborts_base_parameter_0.yaml" />
  </node>

  <!--static_transform_publisher x y z yaw pitch roll frame_id child_frame_id-->
  <node ns="robot_0" pkg="tf2_ros" type="static_transform_publisher" name="base_to_laser" args="0.15 0.0 0.05 0.0 0.0 0.0 /robot_0/base_link /robot_0/base_laser_link"/>

  <!--static_transform_publisher x y z yaw pitch roll frame_id child_frame_id-->
  <node ns="robot_0" pkg="tf2_ros" type="static_transform_publisher" name="base_to_camera" args="-0.15 0.0 0.05 0.0 0.0 0.0 /robot_0/base_link /robot_0/camera_link" />

  <!-- Run the lidar node -->
  <node ns="robot_0" name="rplidar_node" pkg="rplidar_ros" type="rplidarNode" output="screen">
    <param name="serial_port" type="string" value="/dev/rplidar"/>
    <param name="serial_baudrate" type="int" value="115200"/>
    <param name="frame_id" type="string" value="/robot_0/base_laser_link"/>
    <param name="inverted" type="bool" value="false"/>
    <param name="angle_compensate" type="bool" value="true"/>
    <param name="scan_mode" type="string" value="Boost"/>
  </node>

  <!-- Laser filter -->
  <node ns="robot_0" pkg="laser_filters" type="scan_to_scan_filter_chain" output="screen" name="laser_filter">
    <rosparam command="load" file="$(find laser_filters)/examples/laser_scan_angular_bounds_filter.yaml" />
  </node>

  <group ns="robot_0/realsense">
    <include file="$(find roborts_bringup)/launch/rs_camera.launch">
      <arg name="tf_prefix" default="/robot_0/camera"/>
    </include>
  </group>

  <!-- Run the RGB-D & Scan Fusion -->
  <node ns="robot_0" pkg="laser_filters" type="rgbd_scan_fusion" name="rgbd_scan_fusion" respawn="false" />

  <!-- Run the localization node -->
  <node ns="robot_0" pkg="roborts_localization" type="localization_node" name="localization_node" output="screen" respawn="false">
    <rosparam command="load" file="$(find roborts_localization)/config/localization_0.yaml" />
    <rosparam command="load" file="$(find roborts_localization)/amcl/config/amcl.yaml" />
  </node>

  <!-- Run the global planner Node -->
  <node ns="robot_0" pkg="roborts_planning" type="global_planner_node" name="global_planner_node" output="screen" respawn="false">
    <rosparam command="load" file="$(find roborts_planning)/global_planner/config/global_planner_0.yaml" />
  </node>

  <!-- Run the local planner node -->
  <node ns="robot_0" pkg="roborts_planning" type="local_planner_node" name="local_planner_node" output="screen" respawn="false">
    <rosparam command="load" file="$(find roborts_planning)/local_planner/config/local_planner_0.yaml" />
  </node>

  <!-- Run the camera node -->
  <node ns="robot_0" pkg="roborts_camera" type="roborts_camera_node" name="camera_node" respawn="false" />

  <!-- Run the detection node -->
  <node ns="robot_0" pkg="roborts_detection" type="armor_detection_node" name="roborts_detection" respawn="false">
    <rosparam command="load" file="$(find roborts_detection)/armor_detection/config/tf_parameter_0.yaml"/>
  </node>

  <!-- Run the pose_update node -->
  <node ns="robot_0" pkg="decision" type="pose_update.py" name="pose_update" respawn="false" />

</launch>
