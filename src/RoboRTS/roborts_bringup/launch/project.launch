<launch>
  <master auto="start"/>
  <arg name="map" value="test1"/>
  <arg name="static_transform_base2laser" value="-0.15 0.0 0.05 0.0 0.0 0.0 base_link base_laser_link" />
  <arg name="static_transform_base2rs" value="-0.15 0.0 0.05 0.0 0.0 0.0 base_link rs_link" />
  <arg name="rviz_name" value="project"/>

  <param name="robot_name" type="string" value="red"/>
  <!-- <param name="enemy_color" type="string" value="BLUE"/> -->
  
  <!-- Run the map server -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find roborts_bringup)/maps/$(arg map).yaml" respawn="false" />

  <!-- Run the stage simulator -->
  <!-- <node pkg="stage_ros" type="stageros" name="stageros" args="$(find roborts_bringup)/worlds/$(arg map).world" respawn="false">
    <remap from="base_scan" to="scan" />
    <param name="base_watchdog_timeout" value="0.01" />
  </node> -->
  
  <!-- Run the Base Node -->
  <node pkg="roborts_base" type="roborts_base_node" name="roborts_base_node" output="screen" respawn="true">
    <rosparam command="load" file="$(find roborts_base)/config/roborts_base_parameter.yaml" />
  </node>

  <!--static_transform_publisher x y z yaw pitch roll frame_id child_frame_id-->
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_laser" args="$(arg static_transform_base2laser)"/>

  <!--static_transform_publisher x y z yaw pitch roll frame_id child_frame_id-->
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_rs" args="$(arg static_transform_base2rs)" />

  <!-- Run the lidar node -->
  <node name="rplidar_node" pkg="rplidar_ros" type="rplidarNode" output="screen">
    <param name="serial_port" type="string" value="/dev/rplidar"/>
    <param name="serial_baudrate" type="int" value="115200"/>
    <param name="frame_id" type="string" value="base_laser_link"/>
    <param name="inverted" type="bool" value="false"/>
    <param name="angle_compensate" type="bool" value="true"/>
    <param name="scan_mode" type="string" value="Boost"/>
    <remap from="scan" to="scan_filtered"/>
  </node>

  <!-- Laser filter -->
  <!-- <node pkg="laser_filters" type="scan_to_scan_filter_chain" output="screen" name="laser_filter">
    <rosparam command="load" file="$(find laser_filters)/examples/laser_scan_angular_bounds_filter.yaml" />
    <remap from="base_scan" to="scan" />
  </node> -->

  <!-- <group ns="back_camera">
    <include file="$(find roborts_bringup)/launch/rs_camera.launch">
      <arg name="tf_prefix" default="rs"/>
    </include>
  </group> -->

  <!-- <include file="$(find apriltags2_ros)/launch/continuous_detection.launch"/> -->

  <!-- <node pkg="laser_filters" type="rgbd_scan_fusion" name="rgbd_fusion" /> -->

  <!-- Run the localization node -->
  <node pkg="roborts_localization" type="localization_node" name="localization_node" respawn="false">
    <rosparam command="load" file="$(find roborts_localization)/config/localization.yaml" />
    <rosparam command="load" file="$(find roborts_localization)/amcl/config/amcl.yaml" />
    <param name="initial_pose_x" type="double" value="7.5"/>
    <param name="initial_pose_y" type="double" value="0.5"/>
    <param name="initial_pose_a" type="double" value="0"/>
  </node>

  <!-- Run the global planner node -->
  <node pkg="roborts_planning" type="global_planner_node" name="global_planner_node" respawn="true">
    <rosparam command="load" file="$(find roborts_planning)/global_planner/config/global_planner.yaml" />
  </node>

  <!-- Run the local planner node -->
  <node pkg="roborts_planning" type="local_planner_node" name="local_planner_node" respawn="false">
    <rosparam command="load" file="$(find roborts_planning)/local_planner/config/local_planner.yaml" />
  </node>

  <!-- Run the camera node -->
  <!-- <node pkg="roborts_camera" type="roborts_camera_node" name="camera_node" respawn="true" /> -->

  <!-- Run the detection node -->
  <!-- <node pkg="roborts_detection" type="armor_detection_node" name="roborts_detection" respawn="false">
    <rosparam command="load" file="$(find roborts_detection)/armor_detection/config/tf_parameter.yaml"/>
  </node> -->

  <!-- Run the side detection node -->
  <!-- <node pkg="roborts_detection" type="side_detection_node" name="side_roborts_detection" respawn="true" /> -->

  <!-- Run the heat control node -->
  <!-- <node pkg="roborts_detection" type="heat_control" name="heat_control" respawn="false" /> -->

  <!-- Run the pose_update node -->
  <!-- <node pkg="decision" type="pose_update.py" name="pose_update" respawn="false" /> -->

  <!-- Run the rviz -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find roborts_bringup)/rviz/$(arg rviz_name).rviz" />
  
</launch>

